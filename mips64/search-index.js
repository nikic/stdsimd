var N=null,E="",T="t",U="u",searchIndex={};
var r_ea="std_detect";
var r_aa="core_arch",r_ba="i8x16",r_ca="result",r_da="self";
searchIndex[r_ea]={"doc":"Run-time feature detection for the Rust standard library.","i":[[14,"is_x86_feature_detected",r_ea,"Prevents compilation if `is_x86_feature_detected` is used…",N,N],[14,"is_arm_feature_detected",E,"Prevents compilation if `is_arm_feature_detected` is used…",N,N],[14,"is_aarch64_feature_detected",E,"Prevents compilation if `is_aarch64_feature_detected` is…",N,N],[14,"is_powerpc_feature_detected",E,"Prevents compilation if `is_powerpc_feature_detected` is…",N,N],[14,"is_powerpc64_feature_detected",E,"Prevents compilation if `is_powerpc64_feature_detected` is…",N,N],[14,"is_mips_feature_detected",E,"Prevents compilation if `is_mips_feature_detected` is used…",N,N],[14,"is_mips64_feature_detected",E,"Checks if `mips64` feature is enabled.",N,N]],"p":[]};
searchIndex[r_aa]={"doc":"SIMD and vendor intrinsics module.","i":[[0,"mips64",r_aa,"Platform-specific intrinsics for the `mips64` platform.",N,N],[3,r_ba,"core_arch::mips64","MIPS-specific 128-bit wide vector of 16 packed `i8`.",N,N],[5,"__msa_add_a_b",E,"Vector Add Absolute Values.",N,[[[r_ba],[r_ba]],[r_ba]]],[5,"break_",E,"Generates the trap instruction `BREAK`",N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,"try_from",E,E,0,[[[U]],[r_ca]]],[11,"try_into",E,E,0,[[[r_da]],[r_ca]]],[11,"into",E,E,0,[[[r_da]],[U]]],[11,"borrow",E,E,0,[[[r_da]],[T]]],[11,"borrow_mut",E,E,0,[[[r_da]],[T]]],[11,"type_id",E,E,0,[[[r_da]],["typeid"]]],[11,"clone",E,E,0,[[[r_da]],[r_ba]]],[11,"fmt",E,E,0,[[[r_da],["formatter"]],[r_ca]]]],"p":[[3,r_ba]]};
initSearch(searchIndex);addSearchOptions(searchIndex);